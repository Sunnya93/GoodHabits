@page "/"
@inject TodoService _service
@inject IDialogService Dialog
@inject ISnackbar Snackbar
@inject IndexedDBManager DbManager

<h1 class="mt-5 mb-5">Today's Schedule</h1>
<h2 class="mt-5 mb-5">오늘은 @(DateTime.Today.ToString("yyyy년 MM월 dd일")) @(DateTime.Today.DayOfWeek) 입니다.</h2>

<div class="d-flex flex-row-reverse">
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => SaveClick(null))">신규</MudButton>
</div>

@foreach(TodoModel todo in Todos.Where(i => i.TodoDate.Date == DateTime.Today.Date).OrderBy(i => i.TodoDate).ToList())
{
    <MudCard Class="mb-5">
        <MudCardContent>
            <MudText>@todo.Title</MudText>
            <MudText Typo="Typo.body2">@todo.Content</MudText>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(() => SaveClick(todo))">수정</MudButton>
            <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="@(() => DeleteClick(todo))">삭제</MudButton>
        </MudCardActions>
    </MudCard>
}

@code {
    List<TodoModel> Todos = new List<TodoModel>();
    DialogOptions closeButton = new DialogOptions() { CloseButton = true };

    protected override async void OnInitialized()
    {
        await GetAllData();
        StateHasChanged();
    }

    private async Task GetAllData()
    {
        Todos = await DbManager.GetRecords<TodoModel>("Todo");
    }

    private void OnIndexedDbNotification(object sender, IndexedDBNotificationArgs args)
    {
        Snackbar.Add(args.Message, Severity.Warning);
    }

    private async Task SaveClick(TodoModel? newitem)
    {
        try
        {
            bool IsNew = false;
            if (newitem is null)
            {
                IsNew = true; 
                newitem = new TodoModel(){ TodoDate = DateTime.Now };
            }

            var paramters = new DialogParameters { ["Todo"] = newitem };
            var dialog = Dialog.Show<TodayEdit>(IsNew ? "신규" : "수정", paramters);
            var result = await dialog.Result;

            if (!result.Cancelled)
            {
                var newRecord = new StoreRecord<TodoModel>
                {
                    Storename = "Todo",
                    Data = (TodoModel)result.Data
                };

                if (IsNew)
                {
                    await DbManager.AddRecord<TodoModel>(newRecord);
                }
                else
                {
                    await DbManager.UpdateRecord<TodoModel>(newRecord);   
                }

                Snackbar.Add("Save Successfully", Severity.Success);
                
                await GetAllData();
            }
        }
        catch(Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task DeleteClick(TodoModel item)
    {
        try
        {
            var parameters = new DialogParameters();
            parameters.Add("ContentText", "정말로 삭제하시겠습니까? 데이터는 복원할 수 없습니다.");
            parameters.Add("ButtonText", "Delete");
            parameters.Add("Color", Color.Error);

            var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

            var dialog = Dialog.Show<DialogTemplate>("Delete", parameters, options);
            var result = await dialog.Result;

            if (!result.Cancelled)
            {
                await DbManager.DeleteRecord("Todo", item.Id);
                Snackbar.Add("Save Successfully", Severity.Success);
                await GetAllData();
            }
        }
        catch(Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
}
